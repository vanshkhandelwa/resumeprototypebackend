import os
import json
import google.generativeai as genai
from dotenv import load_dotenv
import re

# Load environment variables
load_dotenv()

# Configure Google AI
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "AIzaSyCY9tnrZXjEWJMlU39Y6Znd3eMnFQLBbI8")  # Use env var as default
genai.configure(api_key=GOOGLE_API_KEY)

class ResumeAnalyzer:
    def __init__(self):
        self.model = genai.GenerativeModel("gemini-2.0-flash")
    
    def analyze_full_resume(self, parsed_resume, job_description=None):
        """
        Enhanced analysis of the full resume with comprehensive insights
        
        Args:
            parsed_resume (dict): The parsed resume data containing sections and raw content
            job_description (str, optional): The job description to compare with
            
        Returns:
            dict: Enhanced analysis results
        """
        # Extract sections and raw text
        sections = parsed_resume["sections"]
        resume_text = parsed_resume["raw_content"]
        
        # Perform various analyses
        analysis_results = {
            "overall": self._analyze_overall_fit(resume_text, job_description),
            "sections": {},
            "ats_compatibility": self.analyze_ats_compatibility(resume_text, job_description),
            "bullet_point_analysis": {},
            "improvement_plan": self._generate_improvement_plan(resume_text, job_description),
        }
        
        # Analyze individual sections with enhanced prompts
        for section_name, section_content in sections.items():
            if section_content:  # Only analyze non-empty sections
                section_analysis = self._analyze_section(section_name, section_content, job_description)
                if section_analysis:
                    analysis_results["sections"][section_name] = section_analysis
                    
                    # Store bullet point feedback separately for experience section
                    if section_name.lower() == "experience" and "bullet_point_feedback" in section_analysis:
                        analysis_results["bullet_point_analysis"] = section_analysis["bullet_point_feedback"]
        
        # Generate additional suggestions
        analysis_results["suggestions"] = self._generate_suggestions(resume_text, job_description)
        
        return analysis_results
    
    def _analyze_overall_fit(self, resume_text, job_description):
        """Analyze overall resume fit and quality"""
        prompt = self._create_overall_analysis_prompt(resume_text, job_description)
        response = self.model.generate_content(prompt)
        
        try:
            # Parse the response to structured data
            analysis_text = response.text
            # Clean up the output if it starts/ends with code block markers
            cleaned = analysis_text.strip()
            if cleaned.startswith('```json'):
                cleaned = cleaned[len('```json'):].strip()
            if cleaned.startswith('```'):
                cleaned = cleaned[len('```'):].strip()
            if cleaned.endswith('```'):
                cleaned = cleaned[:-3].strip()
            
            return json.loads(cleaned)
        except Exception as e:
            print(f"Error parsing overall analysis response: {str(e)}")
            # Return a fallback structure
            return {
                "score": 70,
                "summary": "Unable to generate detailed analysis. Please review the resume manually.",
                "strengths": ["Unable to determine strengths"],
                "weaknesses": ["Unable to determine weaknesses"],
                "recommendations": ["Unable to generate specific recommendations"]
            }
    
    def _analyze_section(self, section_name, section_content, job_description):
        """Analyze a specific section of the resume"""
        prompt = self._create_section_analysis_prompt(section_name, section_content, job_description)
        response = self.model.generate_content(prompt)
        
        try:
            # Parse the response to structured data
            analysis_text = response.text
            # Clean up the output if it starts/ends with code block markers
            cleaned = analysis_text.strip()
            if cleaned.startswith('```json'):
                cleaned = cleaned[len('```json'):].strip()
            if cleaned.startswith('```'):
                cleaned = cleaned[len('```'):].strip()
            if cleaned.endswith('```'):
                cleaned = cleaned[:-3].strip()
            
            return json.loads(cleaned)
        except Exception as e:
            print(f"Error parsing section analysis response for {section_name}: {str(e)}")
            # Return a fallback structure
            return {
                "score": 70,
                "strengths": ["Unable to determine strengths"],
                "weaknesses": ["Unable to determine weaknesses"],
                "improvement_suggestions": ["Unable to generate specific suggestions"]
            }
    
    def _generate_suggestions(self, resume_text, job_description):
        """Generate suggestions for resume improvement"""
        prompt = self._create_suggestions_prompt(resume_text, job_description)
        response = self.model.generate_content(prompt)
        
        try:
            # Parse the response to structured data
            suggestions_text = response.text
            # Clean up the output if it starts/ends with code block markers
            cleaned = suggestions_text.strip()
            if cleaned.startswith('```json'):
                cleaned = cleaned[len('```json'):].strip()
            if cleaned.startswith('```'):
                cleaned = cleaned[len('```'):].strip()
            if cleaned.endswith('```'):
                cleaned = cleaned[:-3].strip()
            
            return json.loads(cleaned)
        except Exception as e:
            print(f"Error parsing suggestions response: {str(e)}")
            # Return a fallback structure
            return {
                "content_suggestions": ["Unable to generate content suggestions"],
                "format_suggestions": ["Unable to generate format suggestions"],
                "general_suggestions": ["Unable to generate general suggestions"]
            }
    
    def _create_overall_analysis_prompt(self, resume_text, job_description):
        """Create an enhanced prompt for overall resume analysis"""
        job_desc_text = f"\nJob Description:\n{job_description}" if job_description else ""
        prompt = f"""
Analyze this resume{job_desc_text} and provide a comprehensive assessment in JSON format.

RESUME:
\"\"\"
{resume_text}
\"\"\"

Evaluate the resume on multiple dimensions including content, clarity, impact, and job fit.

Return a detailed JSON object with these exact fields:
- score: numerical score from 0-100
- summary: concise overall assessment (2-3 sentences)
- strengths: array of 3-5 specific strengths with clear examples from the resume
- weaknesses: array of 3-5 specific areas for improvement with clear rationale
- impact_score: numerical score from 0-100 rating how impactful the content is
- clarity_score: numerical score from 0-100 rating how clear and readable the resume is
- relevance_score: numerical score from 0-100 rating job relevance (if job description provided)
- top_recommended_changes: array of 3-5 highest-priority changes to make, ordered by importance
- section_improvement: object with keys for each major section (summary, experience, education, skills) containing specific improvement suggestions
- keyword_recommendations: array of keywords to add or emphasize based on industry standards or job description
- unique_value_proposition: assessment of what makes this candidate stand out and how to emphasize it better

The analysis should be specific, actionable, and tailored to this exact resume.

Only return valid JSON - no markdown formatting, comments, or text outside the JSON object.
"""
        return prompt
    
    def _create_section_analysis_prompt(self, section_name, section_content, job_description):
        """Improved prompt for section analysis with bullet point feedback"""
        job_desc_text = f"\nJob Description:\n{job_description}" if job_description else ""
        
        # Format section content appropriately
        if isinstance(section_content, list):
            formatted_content = "\n".join([str(item) for item in section_content])
        elif isinstance(section_content, dict):
            # For experience sections that might contain job entries as dictionaries
            formatted_content = json.dumps(section_content, indent=2)
        else:
            formatted_content = str(section_content)
        
        # Special handling for experience section to get bullet-by-bullet feedback
        if section_name.lower() == "experience":
            prompt = f"""
Analyze the {section_name} section of this resume{job_desc_text} with special focus on each bullet point.

{section_name.upper()} SECTION:
\"\"\"
{formatted_content}
\"\"\"

Return a JSON object with these fields:
- score: numerical score from 0-100
- strengths: array of 2-4 strengths of this section
- weaknesses: array of 2-4 areas for improvement in this section
- bullet_point_feedback: array of objects analyzing each bullet point with these properties:
  - bullet_text: the original bullet point text
  - strength: is this bullet strong or weak (1-5 scale, where 5 is strongest)
  - feedback: specific suggestion to improve this bullet point
  - improved_version: rewritten version of this bullet point that is stronger, more impactful, and quantified

- improvement_suggestions: array of 2-4 specific suggestions for the entire section

For bullet point feedback:
1. Focus on making each bullet RESULTS-ORIENTED and QUANTIFIED
2. Add metrics and specific achievements where possible
3. Use strong action verbs and remove filler words
4. Ensure proper formatting and consistent tense

Only return valid JSON - no markdown formatting or text outside the JSON.
"""
        else:
            prompt = f"""
Analyze the {section_name} section of this resume{job_desc_text} and provide detailed assessment in JSON format.

{section_name.upper()} SECTION:
\"\"\"
{formatted_content}
\"\"\"

Return a JSON object with these fields:
- score: numerical score from 0-100
- strengths: array of 2-4 specific strengths of this section
- weaknesses: array of 2-4 specific areas for improvement in this section
- improvement_suggestions: array of 2-4 specific suggestions with examples
- content_quality: assessment of how well the content represents the candidate's qualifications (1-5 scale)
- formatting_quality: assessment of how well the section is formatted and structured (1-5 scale)

For the suggestions:
1. Be specific and actionable
2. Provide concrete examples where possible
3. Focus on both content and presentation

Only return valid JSON - no markdown formatting or text outside the JSON.
"""
        
        return prompt
    
    def _create_suggestions_prompt(self, resume_text, job_description):
        """Create prompt for generating improvement suggestions"""
        job_desc_text = f"\nJob Description:\n{job_description}" if job_description else ""
        prompt = f"""
Generate specific, actionable suggestions to improve this resume{job_desc_text}. Return in JSON format.

Resume:
\"\"\"
{resume_text}
\"\"\"

Return only a JSON object with these exact fields:
- content_suggestions: array of 3-5 suggestions to improve content
- format_suggestions: array of 2-3 suggestions to improve formatting
- general_suggestions: array of 2-3 general improvement tips

Each suggestion should be specific, actionable, and tailored to this resume.

Only return valid JSON - no markdown formatting, comments, explanations or text outside the JSON object.
"""
        return prompt

    def _generate_improvement_plan(self, resume_text, job_description):
        """Generate a structured improvement plan for the resume"""
        job_desc_text = f"\nJob Description:\n{job_description}" if job_description else ""
        
        prompt = f"""
Create a step-by-step improvement plan for this resume.{job_desc_text}

RESUME:
\"\"\"
{resume_text}
\"\"\"

Return a JSON object with these fields:
- priority_actions: array of 3-5 highest priority changes to make immediately
- secondary_actions: array of 3-5 additional improvements to make
- section_specific_plan: object with improvement steps for each major section
- tailoring_strategy: specific steps to better tailor this resume for the target job or industry
- before_submission_checklist: array of items to check before submitting the resume

Each action should be specific, actionable, and include examples where relevant.

Only return valid JSON without any explanation or markdown formatting.
"""

        response = self.model.generate_content(prompt)
        cleaned = response.text.strip()
        if cleaned.startswith('```json'):
            cleaned = cleaned[len('```json'):].strip()
        if cleaned.startswith('```'):
            cleaned = cleaned[len('```'):].strip()
        if cleaned.endswith('```'):
            cleaned = cleaned[:-3].strip()
        
        try:
            return json.loads(cleaned)
        except Exception as e:
            return {
                "priority_actions": ["Unable to generate priority actions"],
                "secondary_actions": ["Unable to generate secondary actions"],
                "section_specific_plan": {},
                "tailoring_strategy": "Unable to generate tailoring strategy",
                "before_submission_checklist": ["Unable to generate checklist"]
            }
            
    def analyze_ats_compatibility(self, resume_text, job_description=None):
        """Analyze how well the resume will perform with ATS systems"""
        job_desc_text = f"\nJob Description:\n{job_description}" if job_description else ""
        
        prompt = f"""
Analyze this resume for Applicant Tracking System (ATS) compatibility.{job_desc_text}

RESUME:
\"\"\"
{resume_text}
\"\"\"

Evaluate how well the resume will perform in automated ATS screening systems. Consider:
1. Proper heading formats and section naming
2. Use of standard section titles
3. Keyword optimization
4. Formatting issues that might cause parsing problems
5. File format compatibility
6. Overall keyword density and relevance

Return a JSON object with these fields:
- ats_score: numerical score from 0-100 representing ATS compatibility
- parsing_issues: array of specific formatting or structure issues that might cause ATS problems
- keyword_analysis: assessment of keyword usage and optimization
  - present_keywords: array of important keywords found in the resume
  - missing_keywords: array of recommended keywords to add (especially from job description if provided)
- format_compatibility: assessment of the resume format for ATS systems
- optimization_suggestions: array of specific suggestions to improve ATS performance

Only return valid JSON without any explanation or text outside the JSON object.
"""

        response = self.model.generate_content(prompt)
        cleaned = response.text.strip()
        if cleaned.startswith('```json'):
            cleaned = cleaned[len('```json'):].strip()
        if cleaned.startswith('```'):
            cleaned = cleaned[len('```'):].strip()
        if cleaned.endswith('```'):
            cleaned = cleaned[:-3].strip()
        
        try:
            return json.loads(cleaned)
        except Exception as e:
            # Return a fallback structure
            return {
                "ats_score": 70,
                "parsing_issues": ["Unable to determine specific parsing issues"],
                "keyword_analysis": {
                    "present_keywords": ["Unable to analyze keywords"],
                    "missing_keywords": ["Unable to determine missing keywords"]
                },
                "format_compatibility": "Unable to assess format compatibility",
                "optimization_suggestions": ["Unable to generate specific optimization suggestions"]
            }

    def enhance_bullet_points(self, bullet_points, job_description=None):
        """
        Generate improved versions of resume bullet points
        
        Args:
            bullet_points (list): List of existing bullet point strings
            job_description (str, optional): Job description for tailoring
            
        Returns:
            list: Dictionary of original bullets mapped to enhanced versions
        """
        job_desc_text = f"\nJob Description:\n{job_description}" if job_description else ""
        
        # Format the bullet points into a string
        bullet_text = "\n".join([f"- {bp}" for bp in bullet_points])
        
        prompt = f"""
Enhance these resume bullet points to make them more impactful, quantified, and results-oriented.{job_desc_text}

ORIGINAL BULLET POINTS:
{bullet_text}

For each bullet point:
1. Add SPECIFIC metrics, numbers or percentages wherever possible
2. Use strong ACTION VERBS at the beginning
3. Focus on ACCOMPLISHMENTS and RESULTS, not just responsibilities
4. Remove filler words and unnecessary details
5. Ensure proper formatting and consistent tense (preferably past tense)
6. Include relevant SKILLS or TECHNOLOGIES mentioned in the job description

Return a JSON object with this format:
{{
  "enhanced_bullets": [
    {{
      "original": "original bullet text",
      "enhanced": "improved bullet text",
      "explanation": "brief explanation of changes made and why they're effective"
    }},
    // More entries...
  ]
}}

Only return valid JSON - no markdown formatting or text outside the JSON.
"""

        response = self.model.generate_content(prompt)
        cleaned = response.text.strip()
        if cleaned.startswith('```json'):
            cleaned = cleaned[len('```json'):].strip()
        if cleaned.startswith('```'):
            cleaned = cleaned[len('```'):].strip()
        if cleaned.endswith('```'):
            cleaned = cleaned[:-3].strip()
        
        try:
            result = json.loads(cleaned)
            return result["enhanced_bullets"]
        except Exception as e:
            # Fall back to a simpler approach if JSON parsing fails
            return [{"original": bp, "enhanced": bp, "explanation": "Unable to process enhancement"} for bp in bullet_points]

# Usage example (for testing)
if __name__ == "__main__":
    # Sample data for testing
    sample_parsed_resume = {
        "raw_content": "John Doe\nSoftware Engineer\n\nExperience:\nABC Company - Senior Developer (2020-Present)\nXYZ Corp - Junior Developer (2018-2020)\n\nEducation:\nBS Computer Science, University of Example (2018)",
        "metadata": {"filename": "sample_resume.pdf"},
        "sections": {
            "experience": ["ABC Company - Senior Developer (2020-Present)", "XYZ Corp - Junior Developer (2018-2020)"],
            "education": ["BS Computer Science, University of Example (2018)"],
            "skills": ["Python", "JavaScript", "React", "Node.js"]
        }
    }
    
    sample_job_description = "Looking for a Senior Software Engineer with 3+ years of experience in Python and JavaScript. React experience preferred."
    
    # Initialize analyzer and run test analysis
    analyzer = ResumeAnalyzer()
    result = analyzer.analyze_full_resume(sample_parsed_resume, sample_job_description)
    
    # Print results (for testing)
    print(json.dumps(result, indent=2))